// <auto-generated />
using System;
using Fitness.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fitness.Migrations.FitnessChallenge
{
    [DbContext(typeof(FitnessChallengeContext))]
    [Migration("20240520191322_ChangedTableNames")]
    partial class ChangedTableNames
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fitness.Models.Challenge", b =>
                {
                    b.Property<int>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("challengeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChallengeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("description")
                        .IsFixedLength();

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("endDate");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("startDate");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("title")
                        .IsFixedLength();

                    b.HasKey("ChallengeId")
                        .HasName("PK__chal__A0C649523BA50520");

                    b.ToTable("challenges", (string)null);
                });

            modelBuilder.Entity("Fitness.Models.ChallengeParticipants", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("participantId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipantId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int")
                        .HasColumnName("challengeId");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime")
                        .HasColumnName("joinDate");

                    b.Property<string>("Progress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("progress");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("ParticipantId")
                        .HasName("PK__chal__4EE79210DC8DA1C5");

                    b.HasIndex("ChallengeId");

                    b.ToTable("challengeParticipants", (string)null);
                });

            modelBuilder.Entity("Fitness.Models.Leaderboard", b =>
                {
                    b.Property<int>("LeaderboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("leaderboardId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaderboardId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int")
                        .HasColumnName("challengeId");

                    b.Property<int?>("Rank")
                        .HasColumnType("int")
                        .HasColumnName("rank");

                    b.Property<double?>("Score")
                        .HasColumnType("float")
                        .HasColumnName("score");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("LeaderboardId")
                        .HasName("PK__lead__3B9417B5E438283C");

                    b.HasIndex("ChallengeId");

                    b.ToTable("leaderboard", (string)null);
                });

            modelBuilder.Entity("Fitness.Models.ChallengeParticipants", b =>
                {
                    b.HasOne("Fitness.Models.Challenge", "Challenge")
                        .WithMany("ChallengeParticipants")
                        .HasForeignKey("ChallengeId")
                        .IsRequired()
                        .HasConstraintName("FK__chall__chall__4E88ABD4");

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("Fitness.Models.Leaderboard", b =>
                {
                    b.HasOne("Fitness.Models.Challenge", "Challenge")
                        .WithMany("Leaderboard")
                        .HasForeignKey("ChallengeId")
                        .IsRequired()
                        .HasConstraintName("FK__leade__chall__5165187F");

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("Fitness.Models.Challenge", b =>
                {
                    b.Navigation("ChallengeParticipants");

                    b.Navigation("Leaderboard");
                });
#pragma warning restore 612, 618
        }
    }
}
